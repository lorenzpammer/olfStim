; This is the core program for the LASOM2 controlled Olfactometer
; This is the same for all subsequently assembled on top of the lines
; of this file.
;
; lorenzpammer October, 18th 2011
;
;
; ------------------------------------------------------
; Trial Parameters
; These parameter definitions provide default values.
; They are usually overridden with external definitions.
; ------------------------------------------------------
;
Param, odorValveIndex, 2 		; odorValveIndex specifies two gating odor valves to be opened (N & air stream). Specified for each valve from host computer. range 1:9
Param, numberComponents, 1     ; number of components in the presented odorant. If only a single odor then equals 1.
Param, trialNum, 2		; Number of the current trial
;
; ------------------------------------------------------
; Session Parameters
; These parameter definitions provide default values.
; They are usually overridden at the start of a session.
; ------------------------------------------------------
;
Param, debug, 0				; in the debug mode the program will output several control signals.
;
; ------------------------------------------------------
; Configuration Parameters
; These parameter definitions relate to physical configuration.
; They are usually not overridden.
; ------------------------------------------------------
;
Param, finalValveIndex, 31              ; the final valve is the valve in front of the animal switching between the clean air & the odor.
Param, sniffingValveIndex, 32			; the sniffing valve is the valve which gates the suction of air through the nose
Param, suctionValveIndex, 28			; the suction valve gates the suction around the delivery tube
Param, humidityValveIndex, 27			; the humidity valve gates the delivery of humid air to the nose
Param, startTrialTrigger, $DigIn1 		; defines line which when high, will start the trial
Param, slaveIndex, 1                         ; defines from which slave module the valves are driven
;
;
; ------------------------------------------------------
; Trial Sequence Definition
; ------------------------------------------------------
;
WhileAlways
IfIn, $DigIn1, @startTrial
EndWhile
;
label, @startTrial
;
;
startTimer, 2 ; Starts the timer for the trial 
;
wait, 0 
;
Odor, slaveIndex, odorValveIndex		; Odor will open the specified two odor valves and will automatically trigger the dummy vial valves and thereby close the two dummy valves.
Output, $XLogicOut4, 1			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 3000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut2		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut2
;
Gate, slaveIndex, finalValveIndex	; Triggers the final valve. The index is set in the core lsq file
Output, $XLogicOut1, 1			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 3500	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut3		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut3
;
Gate, slaveIndex, sniffingValveIndex     ; Opens the sniffing valve. The index is set in the core lsq file
Output, $XLogicOut2, 1			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 5000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut4		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut4
;
Dummy, slaveIndex           ; Dummy will open the dummy valve and close all odor valves
Output, $XLogicOut4, 0			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 5000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut5		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut5
;
UnGate, slaveIndex, finalValveIndex	; Closes the final valve. The index is set in the core lsq file
Output, $XLogicOut1, 0			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 5000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut6		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut6
;
UnGate, slaveIndex, sniffingValveIndex     ; Closes the sniffing valve. The index is set in the core lsq file
Output, $XLogicOut2, 0			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 10000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut7		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut7
; Cleaning the nose:
Gate, slaveIndex, sniffingValveIndex     ; Opens the sniffing valve. The index is set in the core lsq file
;
Wait, 2000				; Wait for 2000ms
;
UnGate, slaveIndex, sniffingValveIndex     ; Closes the sniffing valve. The index is set in the core lsq file
;
EmitStatus
Idle,0,0