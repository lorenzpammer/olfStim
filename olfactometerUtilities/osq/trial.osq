; This is the core of the script sent to the LASOM2 sequencer for every trial.
; It defines parameters such as which valves are connected to which 
; connector on the LASOM board, and some hard coded digital triggers.
; For every trial the section "Trial Sequence Definition" will get filled 
; with the specific sequence and timing of all olfactometer events such as
; valve opening times, behaviors to incoming triggers, outgoing triggers, etc.
;
; lorenzpammer October, 18th 2011
; 
;
; ------------------------------------------------------
; Trial Parameters
; These parameter definitions provide default values.
; They are usually overridden with external definitions.
; ------------------------------------------------------
;
Param, odorValveIndex, 2 		; odorValveIndex specifies two gating odor valves to be opened (N & air stream). Specified for each valve from host computer. range 1:9
Param, numberComponents, 1     ; number of components in the presented odorant. If only a single odor then equals 1.
Param, trialNum, 1		; Number of the current trial
Param, startTrialTrigger, $DigIn1 		; defines line which when high, will start the trial
;
; ------------------------------------------------------
; Session Parameters
; These parameter definitions provide default values.
; They are usually overridden at the start of a session.
; ------------------------------------------------------
;
Param, debug, 0				; in the debug mode the program will output several control signals.
;
; ------------------------------------------------------
; Configuration Parameters
; These parameter definitions relate to physical configuration.
; They are usually not overridden.
; ------------------------------------------------------
;
Param, slaveIndex, 1                         ; defines from which slave module the valves are driven
;
; ------------------------------------------------------
; Setup Variables
; These variables are set to a specific value and changed during the
; sequence of actions, which allows the host computer to monitor progress.
; ------------------------------------------------------
;
SetVar, $Var1, 0                        ; $Var1 indicates whether the sequencer started to execute the sequencer file
SetVar, $Var2, 0                        ; $Var2 indicates the number of the current subtrial in a sequential trial
;
; ------------------------------------------------------
; Trial Sequence Definition
; ------------------------------------------------------
;
; ;
startTimer, 2 ; Starts the timer for the trial
;
SetVar, $Var1, 1    ; Causes the sequencer to update the status, about the value of $Var1
SetVar, $Var2, 1    ; Causes the sequencer to update the status, about the value of $Var2
EmitStatus          ; Causes the sequencer to emit the updated status to the host computer. This way the host computer knows, when the trial starts.
;
; ;
wait, 0 
; ATTENTION, NOT FINISHED PROGRAMMING
Output, $DigOut1, 1 		; outputs the defined time stamp (P2) to the hardware output defined in (P1)
;
;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 0	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut2		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut2
;
Odor, slaveIndex, odorValveIndex		; Odor will open the specified two odor valves and will automatically trigger the dummy vial valves and thereby close the two dummy valves.
Output, $XLogicOut4, 1			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 3000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut3		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut3
; ATTENTION, NOT FINISHED PROGRAMMING
Output, $DigOut1, 0		; outputs the defined time stamp (P2) to the hardware output defined in (P1)
;
;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 3000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut4		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut4
;
Gate, slaveIndex, 31        	; Triggers the final valve.
Output, $XLogicOut1, 1			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 3500	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut5		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut5
;
Gate, slaveIndex, 32            ; Opens the sniffing valve (connected to connector 32). The index is set in the core lsq file
Output, $XLogicOut2, 1			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 5000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut6		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut6
;
Dummy, slaveIndex           ; Dummy will open the dummy valve and close all odor valves
Output, $XLogicOut4, 0			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 5000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut7		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut7
;
UnGate, slaveIndex, 31      	; Closes the final valve.
Output, $XLogicOut1, 0			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 5000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut8		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut8
;
UnGate, slaveIndex, 32           ; Closes the sniffing valve. The index is set in the core lsq file
Output, $XLogicOut2, 0			;
;;
WhileAlways 			; enter an indefinite loop. 
SinceTimer, 2, 3        ; Find relative time since start of timer
CheckLapse, 3, 10000	; Check whether the timer >= P2
IfLapse, 3, @lapsedOut9		; If that's the case jump to the label indicated in P2.
EndWhile
;
label, @lapsedOut9
; Cleaning the nose:
Gate, slaveIndex, 32     ; Opens the sniffing valve (connected to connector 32). The index is set in the core lsq file
;
Wait, 2000				; Wait for 2000ms
;
UnGate, slaveIndex, 32     ; Closes the sniffing valve (connected to connector 32). The index is set in the core lsq file
;
SetVar, $Var1, 0    ; Set $Var1 back to initial state indicating end of trial
SetVar, $Var2, 0    ; Set $Var2 back to initial state indicating end of trial
EmitStatus          ; Send the new status of $Var1 to the host
Idle,0,0