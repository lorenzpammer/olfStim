function [h, sessionInstructions] = sessionSettings(h,instruction,usedSettingNames,varargin)
%  [h,sessionInstructions] = sessionSettings(h,instruction,usedSettingNames)
% 
% instruction is either 'setUp' - when building the gui at the beginning of
% a session this option will all the user defineable
% settings to the gui.
% 'setUpStructure' - only sessionInstructions structure is set up.
% or 'get' - which is called at the beginning of every trial from the
% stimulation protocol functions, before calling buildSmell('update') and
% commands are sent to the LASOM. The instruction 'get' will cause the
% function to extract all values from the user defineable settings and give
% them as an output in the sessionInstructions structure. Also it will
% check whether the times defined by the user make sense and whether the
% MFC flow rates are below the maximum flow rate.
%
% usedSettingNames - cell array of strings with the tags of possible
% settings.
%   Possible Settings:
%       - 'scientist'
%       - 'animalName'
%       - 'interTrialInterval'
% 
% 
% 
% lorenzpammer september 2012

%% Check inputs

if nargin < 1
    error('You have to provide the gui handle.')
end

if nargin < 2
    error('You have to give instructions, whether to set up the settings or extract the settings.')
end

if nargin < 3
    if strncmp(instruction, 'setUp',5) || strncmp(instruction,'get',3) || strncmp(instruction,'setUpStructure',3)
        % Fine
    else
        error('First input to the function must be a string "setUp", "setUpStructure" or "get". See the help.')
    end
end

if nargin < 4
    % if additional settings are specified but not correctly, give errors.
    if ~iscell(usedSettingNames)
        error('Third input to function, "usedSettingNames" must be a cell array of strings.')
    end
end



%% Set up

if strcmp(instruction,'setUp') || strcmp(instruction,'setUpStructure')
    
    % Create the sessionInstructions structure
    sessionInstructions = struct('name',{'scientist' 'animalName',...
        'interTrialInterval'},...
        'value',{'' '' 30},...
        'unit',{ 'ID' 'ID' 's'},...
        'userSettingNumber',[],...
        'used',{logical(0) logical(0) logical(0)});  % for every setting put the default of not used, depending on which settings were provided in usedSettingNames, this will be overridden below.
    
    
    
    if strcmp(instruction,'setUp')
        
        
        %% Find which of the possible sessionInstructions should be used in this session
        % Update the 'used' property of the sessionInstructions if a
        % setting
        
        for i = 1: length(usedSettingNames)
            index = find(strcmp(usedSettingNames{i}, {sessionInstructions.name}));
            if ~isempty(index)
                sessionInstructions(index).used = logical(1); % If the setting provided in the inputs to the function exists, mark that it is used.
            else
                error(['The provided setting "' usedSettingNames{i} '" isn''t configured. Change to an existing setting or add a new setting in sessionSettings.m.'])
                % setting doesn't exist in sessionInstructions structure.
                % If you want to add a new setting add it to the code above
                % creating the sessionInstuctions structure.
            end
        end
        
        
        %% Define positions for the controls:
        % Total of 14 possible positions in the panel: 2x7
        
        panelPosition = get(h.sessionSettings.panel,'Position');
        
        % Create necessary number of rows. One row can only  have 7
        % settings:
        numberOfRows = ceil(length(find([sessionInstructions.used])) / 7);
        % Calculate the necessary number of columns per row
        numberOfColumns = ceil(length(find([sessionInstructions.used]))/numberOfRows);
        
        positions = cell(numberOfRows,numberOfColumns); % One cell for each of the x positions in the panel
        width = panelPosition(3) / numberOfColumns;
        height = (panelPosition(4)-15) / numberOfRows; % -10 because the text of the panel is included in the height
        
        % Divide the settings panel into the appropriate fields for the
        % number of settings.
        counter = 0;
        for j = 1 : numberOfRows
            for i = 1 : numberOfColumns
                counter = counter+1;
                tempYPosition = panelPosition(2) + (height*(numberOfRows - j));
                positions{i} = [panelPosition(1) + (i-1)*width,...
                    tempYPosition,...
                    width, height];
            end
        end
        clear counter; clear width; clear height
        
        
        %% Define the size of the edit field ('edit') and its descriptor ('text')
        textHeight = 30; textWidth = 70;
        editHeight = 20; editWidth = 50;
        spacing = 3;
        
        %% Add the options which can be set from the gui
        
        % Order of Olfactometer settings fields
        %     {'scientist' 'animalName', 'interTrialInterval'}
        %         settingValue = {'' '' 30}; % value for the different settings (in the according units)
        useEditField = logical([1 1 1]); % whether or not an editing field should be added to the gui for each setting
        useCheckBox = logical([0 0 0]); % whether or not a checkbox indicating used/non-used should be added to the gui
        dependentOnSetting = {0 0 0}; % on which setting (written as a string) a given setting (sequence) is dependent.
        numberOfActiveSettings = length(find([sessionInstructions.used])); % Get the number of active sessionInstructions.
        usedSettingNames = {sessionInstructions(find([sessionInstructions.used])).name}; % extract the names of the active settings
        
        for userSettingNumber = 1 : numberOfActiveSettings
            
            
            settingNumber = find(strcmp(usedSettingNames(userSettingNumber),{sessionInstructions.name}));
            
            % Set up some missing parameters for the current setting:
            sessionInstructions(settingNumber).userSettingNumber = userSettingNumber;
            
            % Set up the user controls for the current setting in the GUI:
            
            % Text label:
            position = [positions{userSettingNumber}(1)+spacing positions{userSettingNumber}(2)+20 textWidth textHeight];
            h.sessionSettings.text(userSettingNumber) = uicontrol('Parent',h.guiHandle,...
                'Style','text','String',[sessionInstructions(settingNumber).name ' ' sessionInstructions(settingNumber).unit],...
                'Position', position,'Tag',sessionInstructions(settingNumber).name,...
                'Fontsize',7.5);
            
            % Field for editing the value of the setting:
            if useEditField(settingNumber)
                position = [positions{userSettingNumber}(1)+spacing positions{userSettingNumber}(2)+spacing editWidth editHeight];
                h.sessionSettings.edit(userSettingNumber) = uicontrol('Parent',h.guiHandle,...
                    'Style','edit','String',num2str(sessionInstructions(settingNumber).value),'Position', position,...
                    'Tag',sessionInstructions(settingNumber).name);
            end
            
            % Check field whether to use the setting or not:
            if useCheckBox(settingNumber)
                position = [positions{userSettingNumber}(1)+position(3)+spacing positions{userSettingNumber}(2)+10 15 15];
                h.sessionSettings.check(userSettingNumber) = uicontrol('Parent',h.guiHandle,... % check to define whether the final valve should be used
                    'Style','checkbox','String','','Value',sessionInstructions(settingNumber).used,'Position', position,...
                    'Tag',sessionInstructions(settingNumber).name);
                % if there's  a setting for which only the checkbox is set
                % change the position.
                if ~useEditField(settingNumber)
                    position = [positions{userSettingNumber}(1)+editWidth/2 positions{userSettingNumber}(2)+(editHeight/2) 15 15];
                    set(h.olfactometerSettings.check(userSettingNumber),'Position', position);
                end
                
            end
            
            
        end
        
        
    end
    
    
    
end